apply plugin: 'com.android.application'
apply plugin: 'maven'
import com.android.build.OutputFile

import java.text.SimpleDateFormat

project.ext.vectoricons = [
        iconFontNames: ['MaterialIcons.ttf', 'EvilIcons.ttf', 'iconfont.ttf'] // Name of the font files you want to copy
]
apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

//apply from: "../../../libs/workbench/android/workbench/build.gradle"
/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true
def BuildDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
def buildConfig = { buildType ->
    buildType.buildConfigField "String", "BUILD_DATE", "\"" + BuildDate + "\""
    buildType.buildConfigField "String", "LOG_TAG", "\"PadApp\""
}

android {
    signingConfigs {
        configre {
            keyAlias 'rekey'
            keyPassword 'localhost'
            storeFile file('/Users/dreamsleep/Desktop/reKey.jks')
            storePassword 'localhost'
        }
    }
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    defaultConfig {
        applicationId "com.dhcc.tzbb"
        minSdkVersion 17
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        packagingOptions {
            exclude "lib/arm64-v8a/librealm-jni.so"
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        debug {
            buildConfig(debug);
            buildConfigField "String", "SERVER_URL", "\"http://dev.dhjyzf.com/gateway/\""
            buildConfigField "String", "SERVER_IP", "\"192.168.6.110\""
            buildConfigField "int", "SERVER_PORT", "9898"
            buildConfigField "int", "SERVER_TIMEOUT", "10000"
            buildConfigField "String", "LOG_LEVEL", "\"debug\""
            buildConfigField "String", "LOG_TAG", "\"tzbb\""
            manifestPlaceholders=[
                StartActivity:".MainActivity"
            ]
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfig(release);
            buildConfigField "String", "SERVER_URL", "\"http://dev.dhjyzf.com/gateway/\""
            buildConfigField "String", "SERVER_IP", "\"192.168.6.110\""
            buildConfigField "int", "SERVER_PORT", "9898"
            buildConfigField "int", "SERVER_TIMEOUT", "10000"
            buildConfigField "String", "LOG_LEVEL", "\"debug\""
            buildConfigField "String", "LOG_TAG", "\"tzbb\""
            manifestPlaceholders=[
                StartActivity:".MainActivity"
            ]
            signingConfig signingConfigs.configre
        }
    }
    /**
     * jsr305解决方案
     **/
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    // applicationVariants are e.g debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(path: ':react-native-splash-screen')
    compile project(':react-native-vector-icons')
    compile project(':react-native-image-crop-picker')
    compile project(':react-native-video')
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.facebook.react:react-native:+'
    compile 'com.dhcc:workbench:+'
    compile 'com.android.support:design:26.+'
    testCompile 'junit:junit:4.12'
}
